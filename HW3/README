================================================= Update Date: 2014.5.12
[How To INSTALL]

Use the "make" command and complete Installation, 

------------------------------------------------------------------------

[How To Use]

./rpc_server				to build the game server. 
./rpc_client <IP address>	to connect to the server. 

------------------------------------------------------------------------

[Source Code & Function List]

src/client.c	

src/server.c

	msg* hello_1_svc(msg*, struct svc_req*); 
		the function to receive the hello message and initial the game.

	msg* start_1_svc(msg*, struct svc_req*);
		to setup the game and receive the first card to player. 

	msg* send_1_svc(msg*, struct svc_req*);
		to send the second card to player. 

	msg* betdouble_1_svc(msg*, struct svc_req*);
		to set double bet. 

	msg* hit_1_svc(msg*, struct svc_req*);
		to hit one card. 

	msg* stand_1_svc(msg*, struct svc_req*);
		to stand the action, judge the winner and give the bet. 

	msg* ack_1_svc(msg*, struct svc_req*);
		to ask for next game. 

src/rpc_sc.h src/rpc_sc.c
	
	public(.h): 
		uint16_t checksum(msg); 
			the function to calculate the packet checksum. 

src/blackJack.h src/blackJack.c

	public(.h):

		typedef struct _pokerCard pokerCard;
			the structure of the poker card that put on desk, include the cards and the number of cards on desk. 

		typedef struct _player player;
			the structure of the player message, include the coins, bets, name, points, cards on hand and the number of cards. 

		void newGame();
			to take a deck of new cards and initialization the cards on desk. 

		void iniGame();
			to initialization the cards on desk. 

		void shuffle();
			to shuff the cards. 

		void doDouble(player*);
			to check the player's coins and do the "Double" movement. 
		
		void doStand(player*);
			to check the player's points if he/she can "Stand" or not. 

		void giveBet(player*, int);
			to give the bet to player. 
		
		player* judgeIni(player*, player*);
			to judge if any player get 21 points in initial hand-cards, return the address of the player infomation. 

		player* judgeWinner(player*, player*);
			to judge the winner from 2 player, return the address of the player infomation. 

		int judgeIniV(int, int);
			to judge if any player get 21 points in initial hand-cards, argumant 1 means the player 1's points, argument 2 means player 2's.
		   	The return value will be 0, 1 or 2, 0 means no one wins, 1 or 2 means who wins. 

		int judgeWinnerV(int, int, int, int);
			to judge the winner from 2 player, argument 1, 2 means the player 1's points and the number of his hand-cards, 3, 4 means player 2's. 
			The return value will be 0, 1 or 2, 0 means tie, 1 or 2 means the winner. 

		void showHelp();
			to show the rules of the game. It will appear the text in "Rules" file. 

		void newPlayer(player*, char*, int);
			to initialization the player information, include the coins and name. 

		void iniPlayer(player*, int);
			to initialization the player infomation in each game, include the bets and gand-cards. 

		int autoBet(player*);
			to bet any bets of the player. It will return the value between 1 to player's coins randomly. 

		int getCard(player*, int);
			to do the movement that get a card. The argument 1 means who get card and 2 means the card's infomation. 
		
		int doSelect(player*);
			to do the movement chosen. The return value 1, 2, 3 means "HIT", "STAND", "DOUBLE". 

		int autoSelect(player*);
			to do the movement chosen randomly. The return value 1, 2, 3 means "HIT", "STAND", "DOUBLE". 

		void showCard(player*, int);
			to show the hand-cards of player. The argument 2 means the mode, if it's 1 means appear the first card and 0 does not. 

	private(.c): 	

		void swap(int*, int*);
			to swap the value of two argument. 

------------------------------------------------------------------------

[Environment]

Operating System: 
	Ubuntu 12.10, GNU/Linux

Compiler:
	gcc (Ubunti/Linaro 4.7.2-2ubuntu1) 4.7.2

------------------------------------------------------------------------

[Other]

102-2 Homework 3 in the course "Networking Programming"
made by 資工二 410121021 林育慈
